# AUTOGENERATED! DO NOT EDIT! File to edit: 02_pandas.ipynb (unless otherwise specified).

__all__ = ['df_meminfo', 'mem_usage']

# Cell
def df_meminfo(df):
    """Prints an Average and a Total memory usage for each dtype in `df`."""
    dtypes = df.dtypes.unique().tolist()
    ttl = 0
    print("Memory usage for DataFrames types of columns:\n\t\t\t  Average\t    Total")
    for dtype in dtypes:
        selected_dtype = df.select_dtypes(include=[dtype])
        mean_usage_mb = selected_dtype.memory_usage(deep=True).mean()/ 1024 ** 2
        sum_usage_mb  = selected_dtype.memory_usage(deep=True).sum() / 1024 ** 2
        ttl += sum_usage_mb
        print("{}:  \t\t{:6.2f} MB\t{:6.2f} MB".format(dtype,mean_usage_mb,sum_usage_mb))
    print("Total for DataFrame:\t\t\t{:6.2f} MB".format(ttl))

# Cell
def mem_usage(pandas_obj):
    """Returns memory in MB, used by `pandas_obj` (DataFrame or Series)."""
    if isinstance(pandas_obj,pd.DataFrame):
        usage_b = pandas_obj.memory_usage(deep=True).sum()
    else: # we assume if not a df it's a series
        usage_b = pandas_obj.memory_usage(deep=True)
    usage_mb = usage_b / 1024 ** 2 # convert bytes to megabytes
    return "{:03.2f} MB".format(usage_mb)